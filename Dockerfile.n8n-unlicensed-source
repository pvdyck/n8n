# n8n Unlicensed - Built from source with license bypass
# Multi-stage build for optimal image size

# Stage 1: Build n8n from source
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    git \
    python3 \
    make \
    g++ \
    libc6-compat \
    ca-certificates

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.5.2 --activate

# Clone the fork with license modifications
WORKDIR /build
RUN git clone -b n8n-unlicensed https://github.com/pvdyck/n8n.git . && \
    echo "Cloned n8n-unlicensed branch"

# Verify our license modifications are present
RUN echo "Verifying license modifications..." && \
    grep -n "Always return true" packages/cli/src/license.ts && \
    grep -n "Always return unlimited" packages/cli/src/license.ts && \
    grep -n "Always return Enterprise" packages/cli/src/license.ts && \
    echo "‚úÖ License modifications confirmed!"

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build all packages
RUN pnpm build

# Remove dev dependencies and rebuild for production
RUN pnpm prune --prod

# Stage 2: Create the runtime image
FROM node:20-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    bash \
    curl \
    jq \
    sqlite \
    ca-certificates \
    su-exec \
    tini \
    tzdata

# Create n8n user (matching official image)
RUN addgroup -g 1000 -S n8n && \
    adduser -u 1000 -S n8n -G n8n -s /bin/sh

# Create necessary directories
RUN mkdir -p /home/n8n/.n8n /home/n8n/.cache /data && \
    chown -R n8n:n8n /home/n8n /data

# Copy built n8n from builder
COPY --from=builder --chown=n8n:n8n /build /usr/local/lib/node_modules/n8n

# Create symlinks for CLI commands
RUN ln -s /usr/local/lib/node_modules/n8n/packages/cli/bin/n8n /usr/local/bin/n8n && \
    ln -s /usr/local/lib/node_modules/n8n/node_modules/.bin/node-gyp /usr/local/bin/node-gyp

# Set up environment
ENV NODE_ENV=production \
    N8N_PORT=5678 \
    N8N_PROTOCOL=http \
    N8N_USER_FOLDER=/home/n8n \
    N8N_USER_MANAGEMENT_DISABLED=false \
    N8N_SECURE_COOKIE=false \
    EXECUTIONS_DATA_SAVE_ON_SUCCESS=all \
    EXECUTIONS_DATA_SAVE_ON_ERROR=all \
    EXECUTIONS_DATA_SAVE_ON_PROGRESS=false

# Create initialization script
COPY <<'EOF' /init.sh
#!/bin/bash
set -e

# Ensure proper permissions
chown -R n8n:n8n /home/n8n/.n8n /data 2>/dev/null || true

# Function to wait for n8n
wait_for_n8n() {
    echo "‚è≥ Waiting for n8n to start..."
    local retries=30
    while [ $retries -gt 0 ]; do
        if curl -s http://localhost:5678/healthz > /dev/null 2>&1; then
            echo "‚úÖ n8n is ready!"
            return 0
        fi
        retries=$((retries - 1))
        sleep 2
    done
    echo "‚ùå n8n failed to start"
    return 1
}

# Function to setup owner and API key
setup_owner_and_api() {
    sleep 5
    
    echo "üîç Checking if setup is needed..."
    SETUP_STATUS=$(curl -s http://localhost:5678/rest/settings | jq -r '.data.userManagement.showSetupOnFirstLoad' 2>/dev/null || echo "error")
    
    if [ "$SETUP_STATUS" = "true" ]; then
        echo "üìù Creating owner account..."
        
        RESPONSE=$(curl -s -X POST http://localhost:5678/rest/owner/setup \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@n8n.local",
            "firstName": "Admin",
            "lastName": "User",
            "password": "N8nPassword123",
            "agree": true
          }')
        
        if echo "$RESPONSE" | grep -q "email"; then
            echo "‚úÖ Owner account created!"
            
            # Create API key
            echo "üîë Creating API key..."
            DB_PATH="/home/n8n/.n8n/database.sqlite"
            
            # Wait for database to be ready
            local retries=10
            while [ $retries -gt 0 ] && [ ! -f "$DB_PATH" ]; do
                sleep 1
                retries=$((retries - 1))
            done
            
            if [ -f "$DB_PATH" ]; then
                su-exec n8n sqlite3 "$DB_PATH" "INSERT INTO user_api_keys (id, apiKey, userId, label, scopes, createdAt, updatedAt) 
                                    SELECT lower(hex(randomblob(16))), 'n8n_api_test_key_123456789', id, 'Test API Key', '[\"global:owner\"]', datetime('now'), datetime('now') 
                                    FROM user 
                                    WHERE email = 'admin@n8n.local' 
                                    LIMIT 1;" 2>/dev/null || echo "‚ö†Ô∏è  API key might already exist"
                
                echo "‚úÖ API key created!"
            else
                echo "‚ö†Ô∏è  Database not ready for API key creation"
            fi
        else
            echo "‚ùå Failed to create owner account: $RESPONSE"
        fi
    else
        echo "‚úÖ Setup already completed"
    fi
    
    # Check features
    echo ""
    echo "üîç Checking enterprise features..."
    SETTINGS=$(curl -s http://localhost:5678/rest/settings)
    
    # Check specific features
    VARIABLES=$(echo "$SETTINGS" | jq -r '.data.enterprise.variables // false')
    SOURCE_CONTROL=$(echo "$SETTINGS" | jq -r '.data.enterprise.sourceControl // false')
    EXTERNAL_SECRETS=$(echo "$SETTINGS" | jq -r '.data.enterprise.externalSecrets // false')
    PLAN_NAME=$(echo "$SETTINGS" | jq -r '.data.license.planName // "Unknown"')
    
    echo ""
    echo "üìä License Status:"
    echo "  Plan: $PLAN_NAME"
    echo "  Variables: $VARIABLES"
    echo "  Source Control: $SOURCE_CONTROL"
    echo "  External Secrets: $EXTERNAL_SECRETS"
    
    echo ""
    echo "============================================"
    echo "üöÄ n8n UNLICENSED (Built from Source)"
    echo "============================================"
    echo "üìç URL: http://localhost:5678"
    echo "üìß Email: admin@n8n.local"
    echo "üîê Password: N8nPassword123"
    echo "üîë API Key: n8n_api_test_key_123456789"
    echo "============================================"
    echo "‚ú® All enterprise features should be enabled!"
    echo "============================================"
}

# Start setup in background
(
    if wait_for_n8n; then
        setup_owner_and_api
    fi
) &

# Start n8n as n8n user
echo "üöÄ Starting n8n..."
exec su-exec n8n tini -- n8n
EOF

RUN chmod +x /init.sh

# Expose port
EXPOSE 5678

# Set working directory
WORKDIR /home/n8n

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s \
    CMD curl -f http://localhost:5678/healthz || exit 1

# Use our init script as entrypoint
ENTRYPOINT ["/init.sh"]