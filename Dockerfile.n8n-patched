# n8n with Runtime License Patching
FROM n8nio/n8n:latest

USER root

# Install required tools
RUN apk add --no-cache sqlite curl jq bash sed

# Create patch script that modifies the compiled JavaScript
COPY <<'PATCH' /patch-n8n.sh
#!/bin/bash
echo "üîß Patching n8n license checks..."

# Find and patch the main license file
LICENSE_FILE=$(find /usr/local/lib/node_modules/n8n -name "license.js" -path "*/dist/*" | head -1)

if [ -f "$LICENSE_FILE" ]; then
    echo "Found license file: $LICENSE_FILE"
    
    # Backup original
    cp "$LICENSE_FILE" "$LICENSE_FILE.bak"
    
    # Patch isLicensed to always return true
    sed -i 's/isLicensed(feature) {[^}]*}/isLicensed(feature) { return true; }/g' "$LICENSE_FILE"
    
    # Patch getFeatureValue to return unlimited
    sed -i 's/getFeatureValue(feature) {[^}]*}/getFeatureValue(feature) { return -1; }/g' "$LICENSE_FILE"
    
    # Patch getValue to return unlimited
    sed -i 's/getValue(feature) {[^}]*}/getValue(feature) { return -1; }/g' "$LICENSE_FILE"
    
    # Patch getPlanName to return Enterprise
    sed -i 's/getPlanName() {[^}]*}/getPlanName() { return "Enterprise"; }/g' "$LICENSE_FILE"
    
    # Patch hasFeatureEnabled
    sed -i 's/hasFeatureEnabled([^)]*) {[^}]*}/hasFeatureEnabled(feature) { return true; }/g' "$LICENSE_FILE"
    
    echo "‚úÖ License file patched"
fi

# Find and patch frontend service to enable all features
FRONTEND_FILES=$(find /usr/local/lib/node_modules/n8n -name "*.js" -path "*/dist/*" -exec grep -l "enterprise.*false" {} \; 2>/dev/null)

for file in $FRONTEND_FILES; do
    echo "Patching frontend file: $file"
    sed -i 's/"variables":false/"variables":true/g' "$file"
    sed -i 's/"sourceControl":false/"sourceControl":true/g' "$file"
    sed -i 's/"externalSecrets":false/"externalSecrets":true/g' "$file"
    sed -i 's/"auditLogs":false/"auditLogs":true/g' "$file"
    sed -i 's/"advancedPermissions":false/"advancedPermissions":true/g' "$file"
    sed -i 's/"ldap":false/"ldap":true/g' "$file"
    sed -i 's/"saml":false/"saml":true/g' "$file"
done

echo "‚úÖ All patches applied"
PATCH

RUN chmod +x /patch-n8n.sh

# Create initialization script
COPY <<'EOF' /init.sh
#!/bin/bash
set -e

# Apply patches before starting n8n
/patch-n8n.sh

# Function to wait for n8n
wait_for_n8n() {
    echo "‚è≥ Waiting for n8n to start..."
    local retries=30
    while [ $retries -gt 0 ]; do
        if curl -s http://localhost:5678/healthz > /dev/null 2>&1; then
            echo "‚úÖ n8n is ready!"
            return 0
        fi
        retries=$((retries - 1))
        sleep 2
    done
    echo "‚ùå n8n failed to start"
    return 1
}

# Function to setup owner and API key
setup_owner_and_api() {
    sleep 5
    
    # Check if setup is needed
    SETUP_STATUS=$(curl -s http://localhost:5678/rest/settings | jq -r '.data.userManagement.showSetupOnFirstLoad' 2>/dev/null || echo "error")
    
    if [ "$SETUP_STATUS" = "true" ]; then
        echo "üìù Creating owner account..."
        
        RESPONSE=$(curl -s -X POST http://localhost:5678/rest/owner/setup \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@n8n.local",
            "firstName": "Admin",
            "lastName": "User",
            "password": "N8nPassword123",
            "agree": true
          }')
        
        if echo "$RESPONSE" | grep -q "email"; then
            echo "‚úÖ Owner account created!"
            
            # Create API key
            echo "üîë Creating API key..."
            DB_PATH="/home/node/.n8n/database.sqlite"
            sleep 3
            
            sqlite3 "$DB_PATH" "INSERT INTO user_api_keys (id, apiKey, userId, label, scopes, createdAt, updatedAt) 
                                SELECT lower(hex(randomblob(16))), 'n8n_api_test_key_123456789', id, 'Test API Key', '[\"global:owner\"]', datetime('now'), datetime('now') 
                                FROM user 
                                WHERE email = 'admin@n8n.local' 
                                LIMIT 1;" 2>/dev/null || echo "API key might already exist"
            
            echo "‚úÖ API key created!"
        fi
    fi
    
    # Check features
    echo ""
    echo "üîç Checking enterprise features..."
    SETTINGS=$(curl -s http://localhost:5678/rest/settings)
    echo "$SETTINGS" | jq '.data.enterprise' || echo "No enterprise features"
    
    echo ""
    echo "============================================"
    echo "üöÄ n8n PATCHED is ready!"
    echo "============================================"
    echo "üìç URL: http://localhost:7001"
    echo "üìß Email: admin@n8n.local"
    echo "üîê Password: N8nPassword123"
    echo "üîë API Key: n8n_api_test_key_123456789"
    echo "============================================"
}

# Start setup in background
(
    if wait_for_n8n; then
        setup_owner_and_api
    fi
) &

# Start n8n
exec docker-entrypoint.sh "$@"
EOF

RUN chmod +x /init.sh

USER node

ENTRYPOINT ["tini", "--", "/init.sh"]
CMD ["n8n"]