# n8n with License Bypass via Environment Variable
FROM n8nio/n8n:latest

USER root

# Install required tools
RUN apk add --no-cache sqlite curl jq bash

# Create a mock license certificate
RUN echo '{"cert":"mock","features":{"feat:sharing":1,"feat:ldap":1,"feat:saml":1,"feat:logStreaming":1,"feat:advancedExecutionFilters":1,"feat:variables":1,"feat:sourceControl":1,"feat:auditLogs":1,"feat:externalSecrets":1,"feat:debugInEditor":1,"feat:binaryDataS3":1,"feat:workflowHistory":1,"feat:workerView":1,"feat:advancedPermissions":1,"feat:apiKeyScopes":1,"quota:users":-1,"quota:workflows":-1},"planName":"Enterprise"}' > /tmp/license.json

# Create initialization script
COPY <<'EOF' /init.sh
#!/bin/bash
set -e

# Set a mock license certificate
export N8N_LICENSE_CERT=$(cat /tmp/license.json | base64 -w 0)
export N8N_LICENSE_ACTIVATION_KEY="MOCK-LICENSE-KEY"
export N8N_LICENSE_ENABLED=true

echo "🔐 Mock license set"

# Function to wait for n8n
wait_for_n8n() {
    echo "⏳ Waiting for n8n to start..."
    local retries=30
    while [ $retries -gt 0 ]; do
        if curl -s http://localhost:5678/healthz > /dev/null 2>&1; then
            echo "✅ n8n is ready!"
            return 0
        fi
        retries=$((retries - 1))
        sleep 2
    done
    echo "❌ n8n failed to start"
    return 1
}

# Function to setup owner and API key
setup_owner_and_api() {
    sleep 5
    
    # Check if setup is needed
    SETUP_STATUS=$(curl -s http://localhost:5678/rest/settings | jq -r '.data.userManagement.showSetupOnFirstLoad' 2>/dev/null || echo "error")
    
    if [ "$SETUP_STATUS" = "true" ]; then
        echo "📝 Creating owner account..."
        
        RESPONSE=$(curl -s -X POST http://localhost:5678/rest/owner/setup \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@n8n.local",
            "firstName": "Admin",
            "lastName": "User",
            "password": "N8nPassword123",
            "agree": true
          }')
        
        if echo "$RESPONSE" | grep -q "email"; then
            echo "✅ Owner account created!"
            
            # Create API key
            echo "🔑 Creating API key..."
            DB_PATH="/home/node/.n8n/database.sqlite"
            sleep 3
            
            sqlite3 "$DB_PATH" "INSERT INTO user_api_keys (id, apiKey, userId, label, scopes, createdAt, updatedAt) 
                                SELECT lower(hex(randomblob(16))), 'n8n_api_test_key_123456789', id, 'Test API Key', '[\"global:owner\"]', datetime('now'), datetime('now') 
                                FROM user 
                                WHERE email = 'admin@n8n.local' 
                                LIMIT 1;" 2>/dev/null || echo "API key might already exist"
            
            echo "✅ API key created!"
        fi
    fi
    
    # Check features
    echo ""
    echo "🔍 Checking enterprise features..."
    SETTINGS=$(curl -s http://localhost:5678/rest/settings)
    echo "$SETTINGS" | jq '.data.enterprise' || echo "No enterprise features"
    echo ""
    echo "Plan: $(echo "$SETTINGS" | jq -r '.data.license.planName')"
    
    echo ""
    echo "============================================"
    echo "🚀 n8n with LICENSE BYPASS is ready!"
    echo "============================================"
    echo "📍 URL: http://localhost:5678"
    echo "📧 Email: admin@n8n.local"
    echo "🔐 Password: N8nPassword123"
    echo "🔑 API Key: n8n_api_test_key_123456789"
    echo "============================================"
}

# Start setup in background
(
    if wait_for_n8n; then
        setup_owner_and_api
    fi
) &

# Start n8n with mock license
exec docker-entrypoint.sh "$@"
EOF

RUN chmod +x /init.sh

USER node

ENTRYPOINT ["tini", "--", "/init.sh"]
CMD ["n8n"]