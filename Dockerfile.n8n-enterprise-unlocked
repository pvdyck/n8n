# n8n Enterprise Unlocked - Built from source with all features enabled
# Multi-stage build for optimal size and build caching

# ============================================
# Stage 1: Builder - Clone and build from source
# ============================================
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    bash \
    git \
    python3 \
    make \
    g++ \
    libc6-compat \
    ca-certificates \
    # For node-gyp
    build-base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.5.2 --activate

# Set working directory
WORKDIR /build

# Clone the fork with license modifications
RUN echo "üîß Cloning n8n-unlicensed branch from fork..." && \
    git clone -b n8n-unlicensed https://github.com/pvdyck/n8n.git . && \
    git log -1 --oneline && \
    echo "‚úÖ Repository cloned successfully"

# Verify our license modifications are present
RUN echo "üîç Verifying license modifications..." && \
    grep -n "Always return true" packages/cli/src/license.ts && \
    grep -n "Always return unlimited" packages/cli/src/license.ts && \
    grep -n "Always return Enterprise" packages/cli/src/license.ts && \
    echo "‚úÖ License modifications confirmed! All features will be enabled."

# Install dependencies (this is the longest step ~5-10 minutes)
RUN echo "üì¶ Installing dependencies..." && \
    pnpm install --frozen-lockfile

# Build all packages (another long step ~5 minutes)
RUN echo "üèóÔ∏è Building n8n from source..." && \
    pnpm build

# Remove dev dependencies to reduce size
RUN echo "üßπ Cleaning up..." && \
    pnpm prune --prod && \
    rm -rf .git

# ============================================
# Stage 2: Runtime - Minimal image with built n8n
# ============================================
FROM node:20-alpine AS runtime

# Install only runtime dependencies
RUN apk add --no-cache \
    bash \
    curl \
    jq \
    sqlite \
    ca-certificates \
    su-exec \
    tini \
    tzdata \
    # Required for some nodes
    graphicsmagick \
    git

# Create node user if it doesn't exist
RUN id -u node &>/dev/null || adduser -D -u 1000 node

# Create necessary directories
RUN mkdir -p /home/node/.n8n /home/node/.cache /data && \
    chown -R node:node /home/node /data

# Copy built n8n from builder stage
COPY --from=builder --chown=node:node /build /usr/local/lib/node_modules/n8n

# Create global symlinks
RUN ln -s /usr/local/lib/node_modules/n8n/packages/cli/bin/n8n /usr/local/bin/n8n && \
    chmod +x /usr/local/bin/n8n

# Create initialization script
COPY <<'INIT' /init-enterprise.sh
#!/bin/bash
set -e

echo "üöÄ Starting n8n Enterprise Unlocked..."
echo "üìç Version: Built from source with license bypass"
echo ""

# Ensure correct permissions
chown -R node:node /home/node/.n8n /data 2>/dev/null || true

# Function to wait for n8n to be ready
wait_for_n8n() {
    echo "‚è≥ Waiting for n8n to initialize..."
    local max_attempts=60
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:5678/healthz >/dev/null 2>&1; then
            echo "‚úÖ n8n is responding!"
            return 0
        fi
        attempt=$((attempt + 1))
        echo -n "."
        sleep 2
    done
    
    echo ""
    echo "‚ùå n8n failed to start after $max_attempts attempts"
    return 1
}

# Function to setup owner account and API key
setup_enterprise() {
    echo ""
    echo "üîß Setting up enterprise environment..."
    
    # Wait a bit more for full initialization
    sleep 5
    
    # Check if setup is needed
    local setup_status=$(curl -s http://localhost:5678/rest/settings | jq -r '.data.userManagement.showSetupOnFirstLoad' 2>/dev/null || echo "error")
    
    if [ "$setup_status" = "true" ]; then
        echo "üìù Creating owner account..."
        
        local response=$(curl -s -X POST http://localhost:5678/rest/owner/setup \
            -H "Content-Type: application/json" \
            -d '{
                "email": "admin@n8n.local",
                "firstName": "Admin",
                "lastName": "User",
                "password": "N8nPassword123",
                "agree": true
            }')
        
        if echo "$response" | grep -q "email"; then
            echo "‚úÖ Owner account created successfully!"
            
            # Create API key
            echo "üîë Creating static API key..."
            local db_path="/home/node/.n8n/database.sqlite"
            
            # Wait for database to be ready
            local retries=10
            while [ $retries -gt 0 ] && [ ! -f "$db_path" ]; do
                sleep 1
                retries=$((retries - 1))
            done
            
            if [ -f "$db_path" ]; then
                # Create API key with specific value for port 6666
                su-exec node sqlite3 "$db_path" "
                    INSERT INTO user_api_keys (id, apiKey, userId, label, scopes, createdAt, updatedAt) 
                    SELECT 
                        lower(hex(randomblob(16))), 
                        'n8n_api_enterprise_key_6666', 
                        id, 
                        'Enterprise API Key', 
                        '[\"global:owner\"]', 
                        datetime('now'), 
                        datetime('now') 
                    FROM user 
                    WHERE email = 'admin@n8n.local' 
                    LIMIT 1;" 2>/dev/null || echo "‚ö†Ô∏è  API key might already exist"
                
                echo "‚úÖ API key created: n8n_api_enterprise_key_6666"
            else
                echo "‚ö†Ô∏è  Database not ready for API key creation"
            fi
        else
            echo "‚ùå Failed to create owner account: $response"
        fi
    else
        echo "‚ÑπÔ∏è  Setup already completed"
    fi
    
    # Verify enterprise features
    echo ""
    echo "üîç Verifying enterprise features..."
    local settings=$(curl -s http://localhost:5678/rest/settings)
    
    echo ""
    echo "üìä License Status:"
    echo "  Plan: $(echo "$settings" | jq -r '.data.license.planName // "Unknown"')"
    echo ""
    echo "‚ú® Enterprise Features:"
    echo "  Variables: $(echo "$settings" | jq -r '.data.enterprise.variables // false')"
    echo "  Source Control: $(echo "$settings" | jq -r '.data.enterprise.sourceControl // false')"
    echo "  External Secrets: $(echo "$settings" | jq -r '.data.enterprise.externalSecrets // false')"
    echo "  LDAP: $(echo "$settings" | jq -r '.data.enterprise.ldap // false')"
    echo "  SAML: $(echo "$settings" | jq -r '.data.enterprise.saml // false')"
    echo "  Audit Logs: $(echo "$settings" | jq -r '.data.enterprise.auditLogs // false')"
    
    echo ""
    echo "============================================"
    echo "üéâ n8n Enterprise Unlocked is ready!"
    echo "============================================"
    echo "üìç URL: http://localhost:6666"
    echo "üìß Email: admin@n8n.local"
    echo "üîê Password: N8nPassword123"
    echo "üîë API Key: n8n_api_enterprise_key_6666"
    echo "‚ú® All enterprise features enabled!"
    echo "============================================"
}

# Start setup in background
(
    if wait_for_n8n; then
        setup_enterprise
    else
        echo "‚ùå Setup failed - n8n did not start properly"
    fi
) &

# Start n8n as node user
echo "üöÄ Starting n8n process..."
exec su-exec node tini -- n8n
INIT

RUN chmod +x /init-enterprise.sh

# Set environment variables
ENV NODE_ENV=production \
    N8N_PORT=5678 \
    N8N_PROTOCOL=http \
    N8N_USER_FOLDER=/home/node \
    EXECUTIONS_DATA_SAVE_ON_SUCCESS=all \
    EXECUTIONS_DATA_SAVE_ON_ERROR=all \
    N8N_SECURE_COOKIE=false

# Expose port (will be mapped to 6666)
EXPOSE 5678

# Set working directory
WORKDIR /home/node

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5678/healthz || exit 1

# Use init script as entrypoint
ENTRYPOINT ["/init-enterprise.sh"]